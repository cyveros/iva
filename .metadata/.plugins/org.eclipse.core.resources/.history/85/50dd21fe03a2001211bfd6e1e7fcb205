import java.awt.Point;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;


public class houghTransform {
	private Map<Point, double[]> accumulator;
	private final int SINGLETON_LENGTH = 181, INCREMENT_STEP = 2;
	
	public houghTransform(){
		// 36 division 2 deg per decade
		accumulator = new HashMap<Point, double[]>();
	}
	
	public void add(Point p, double[] singleton){
		accumulator.put(p, singleton);
		
	}
	
	public double[] computeSingleton(Point p){
		double[] d = new double[SINGLETON_LENGTH];
		
		// from 0 to PI (180 deg), increment by 5 deg each time (5 deg is also the threshold value)
		for (int i = 0; i < SINGLETON_LENGTH; i += INCREMENT_STEP){
			d[i] = p.getX() * Math.cos(Math.toRadians(i)) + p.getY() * Math.sin(Math.toRadians(i));
		}
		
		return d;
	}
	
	public void accumulateData(boolean[][] data){
		int width = data.length, height = data[0].length;
		
		for (int i = 0; i < width; i++){
			for (int j = 0; j < height; j++){
				if (data[i][j]){
					Point p = new Point(i, j);
					
					add(p, computeSingleton(p));
				}
				
			}
		}
	}
	
	// d = x cos(theta) + y sin(theta)
	// perfect result for horizontal line where d = y
	// twisted result for vertical line where d = x (so all possible x must be in side the range but line segment is undetectable)
	// diagonal TBD
	// return -1 if not found any
	public Point vote(){
		int rowSize = accumulator.size(), columnSize = (SINGLETON_LENGTH - 1)/INCREMENT_STEP;
		int index = 0;
		
		Map<Point, Integer> m = new HashMap<Point, Integer>();
		// compare and find the mostly likely hough trasnform angle in degree for the section
		// how to vote? find the angle whose rho occurrence is the highest
		// given step of 5 deg, total 36 division
		// we need to take care all data of row above and below
		// H(d, theta) += 1 if for given value d != 0 and angle theta, we had a occurence in the table
		for(double[] d: accumulator.values()){
			for(int i = 0; i < columnSize; i++){
				int distance = (int)Math.round(d[i]);

				if (distance == 0)
					continue;
				
				Point key = new Point(distance, i * INCREMENT_STEP);
				
				if (m.containsKey(key)){
					m.put(key, m.get(key) + 1);
				}else{
					m.put(key, 1);
				}
			}
			
			index++;
		}
		
		Iterator<Entry<Point, Integer>> it = m.entrySet().iterator();
		int max = 0;
		Point candidateKey = new Point(0, 0);
		
	    while (it.hasNext()) {
	        Entry<Point, Integer> pairs = it.next();
	        Point tmp = (Point)pairs.getKey();
	        int occurence = pairs.getValue();
	        
	        if (occurence >= max){
	        	if (occurence == max){
	        		if ((candidateKey.getY() > 90  && tmp.getY() > candidateKey.getY()) || (candidateKey.getY() < 90  && tmp.getY() < candidateKey.getY())){
	        			occurence = max;
	        			candidateKey.setLocation(tmp); 
	        		}
	        	}else{
	        		max = occurence;
	        		candidateKey.setLocation(tmp); 
	        	}
	        	
	        	 	
	        }
	        
	        System.out.println(tmp.getX() + "\t" + tmp.getY() + "\t" + occurence);
	        //it.remove(); // avoids a ConcurrentModificationException
	    }
		
	   

		return candidateKey;
	}
	
	public static void main(String[] args){
		
		boolean[][] test = new boolean[5][5];
		
		for (int j = 0; j < 5; j++){
			
				test[3][j] = true;
		}
		
		houghTransform ht = new houghTransform();
		
		ht.accumulateData(test);
		
		Point target = ht.vote();
		
		System.out.println(target.getX() + " " + target.getY());
		
	}
}
